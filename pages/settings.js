import { useState, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import BottomMenu from '../components/BottomMenu';
import { useUser } from '../utils/context';
import { useQueryClient } from '@tanstack/react-query';
import { setupBackButton, setupHeader } from '../utils/telegram';

export default function Settings() {
  const { user } = useUser();
  const router = useRouter();
  const queryClient = useQueryClient();
  const [isDeleting, setIsDeleting] = useState(false);
  const [isDeletingAccount, setIsDeletingAccount] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [showAccountDeleteConfirmation, setShowAccountDeleteConfirmation] = useState(false);
  const [message, setMessage] = useState(null);
  const [error, setError] = useState(null);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram WebApp
  useEffect(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    setupBackButton(true, () => {
      // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      router.push('/questions');
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setupHeader({ title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' });
    
    // –ü—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    return () => {
      setupBackButton(false);
      setupHeader({ title: 'MyShadow' });
    };
  }, [router]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const clearAllAnswers = async () => {
    if (!user) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    try {
      setIsDeleting(true);
      setError(null);
      setMessage(null);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π ID –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Telegram ID
      const userId = user.id || user.tgId;

      const response = await fetch(`/api/delete-user-answers?userId=${userId}`, {
        method: 'DELETE',
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç—ã');
      }

      setMessage(data.message || '–í—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
      setShowConfirmation(false);
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
      await queryClient.invalidateQueries(['blocks-with-questions']);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      setTimeout(() => {
        router.push('/questions');
      }, 1500);
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:', err);
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsDeleting(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const deleteAccount = async () => {
    if (!user) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    try {
      setIsDeletingAccount(true);
      setError(null);
      setMessage(null);

      const response = await fetch('/api/delete-account', {
        method: 'DELETE',
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç');
      }

      setMessage(data.message || '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      setShowAccountDeleteConfirmation(false);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º Telegram WebApp —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        if (typeof window !== 'undefined' && window.Telegram && window.Telegram.WebApp) {
          window.Telegram.WebApp.close();
        } else {
          // –ï—Å–ª–∏ –Ω–µ –≤ Telegram, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          router.push('/');
        }
      }, 2000);
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', err);
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsDeletingAccount(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ Telegram –±–æ—Ç
  const contactDeveloper = () => {
    if (typeof window !== 'undefined') {
      window.open('https://t.me/QA_MyShadow_bot', '_blank');
    }
  };

  return (
    <div className="container">
      <Head>
        <title>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ | MyShadowApp</title>
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no" />
        <meta name="description" content="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MyShadowApp" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700&display=swap" rel="stylesheet" />
      </Head>

      <main className="main">
        <h1 className="app-title">MyShadow</h1>
        <div className="settings-container">
          <h2 className="settings-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          
          {message && (
            <div className="message success">{message}</div>
          )}
          
          {error && (
            <div className="message error">{error}</div>
          )}
          
          <div className="settings-menu">
            {!showConfirmation ? (
              <button 
                className="menu-item clear-answers-btn"
                onClick={() => setShowConfirmation(true)}
                disabled={isDeleting || !user}
              >
                <span className="icon">üóëÔ∏è</span>
                <span className="text">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã</span>
              </button>
            ) : (
              <div className="confirmation-box">
                <p className="confirmation-text">–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
                <div className="confirmation-buttons">
                  <button 
                    className="confirm-btn"
                    onClick={clearAllAnswers}
                    disabled={isDeleting}
                  >
                    {isDeleting ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ'}
                  </button>
                  <button 
                    className="cancel-btn"
                    onClick={() => setShowConfirmation(false)}
                    disabled={isDeleting}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>
            )}
            
            {!showAccountDeleteConfirmation ? (
              <button 
                className="menu-item delete-account-btn"
                onClick={() => setShowAccountDeleteConfirmation(true)}
                disabled={isDeletingAccount || !user}
              >
                <span className="icon">‚ö†Ô∏è</span>
                <span className="text">–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</span>
              </button>
            ) : (
              <div className="confirmation-box danger">
                <p className="confirmation-text">–≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–Ω –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –≤—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ MyShadow.</p>
                <div className="confirmation-buttons">
                  <button 
                    className="confirm-btn"
                    onClick={deleteAccount}
                    disabled={isDeletingAccount}
                  >
                    {isDeletingAccount ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–î–∞, —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
                  </button>
                  <button 
                    className="cancel-btn"
                    onClick={() => setShowAccountDeleteConfirmation(false)}
                    disabled={isDeletingAccount}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>
            )}
            
            <button 
              className="menu-item contact-btn"
              onClick={contactDeveloper}
            >
              <span className="icon">üí¨</span>
              <span className="text">–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</span>
            </button>
          </div>
        </div>
      </main>

      <BottomMenu activePage="settings" />

      <style jsx>{`
        .container {
          min-height: 100vh;
          padding: 0;
          display: flex;
          flex-direction: column;
          background-color: var(--tg-theme-bg-color, #ffffff);
          color: var(--tg-theme-text-color, #000000);
          position: relative;
        }
        
        .main {
          flex: 1;
          padding-top: 2rem;
          padding-bottom: 5rem;
        }
        
        .app-title {
          text-align: center;
          font-size: 1.5rem;
          font-weight: bold;
          margin-bottom: 1.5rem;
          background: linear-gradient(90deg, #ff6b6b, #6b66ff);
          -webkit-background-clip: text;
          background-clip: text;
          -webkit-text-fill-color: transparent;
          font-family: 'Montserrat', sans-serif;
          letter-spacing: 1px;
        }
        
        .settings-container {
          padding: 1rem;
          max-width: 600px;
          margin: 0 auto;
        }
        
        .settings-title {
          font-size: 1.8rem;
          margin-bottom: 2rem;
          text-align: center;
          color: var(--tg-theme-text-color, #000000);
          font-family: 'Montserrat', sans-serif;
          letter-spacing: 0.5px;
          font-weight: bold;
        }
        
        .settings-menu {
          display: flex;
          flex-direction: column;
          gap: 1rem;
          margin-bottom: 2rem;
        }
        
        .menu-item {
          display: flex;
          align-items: center;
          padding: 1rem;
          border-radius: 12px;
          background-color: var(--tg-theme-bg-color, #ffffff);
          border: 1px solid var(--tg-theme-button-color, #5288c1);
          color: var(--tg-theme-text-color, #000000);
          font-size: 1rem;
          cursor: pointer;
          transition: all 0.2s ease;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .menu-item:hover, .menu-item:focus {
          background-color: var(--tg-theme-secondary-bg-color, #f5f5f5);
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }
        
        .menu-item:active {
          transform: translateY(0);
          box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
        }
        
        .menu-item .icon {
          font-size: 1.5rem;
          margin-right: 1rem;
        }
        
        .menu-item .text {
          flex: 1;
        }
        
        .clear-answers-btn {
          border-color: var(--tg-theme-button-color, #5288c1);
        }
        
        .delete-account-btn {
          border-color: var(--tg-theme-destructive-text-color, #ff0000);
          color: var(--tg-theme-destructive-text-color, #ff0000);
        }
        
        .contact-btn {
          border-color: var(--tg-theme-button-color, #5288c1);
          background-color: var(--tg-theme-button-color, #5288c1);
          color: var(--tg-theme-button-text-color, #ffffff);
        }
        
        .confirmation-box {
          background-color: var(--tg-theme-secondary-bg-color, #f5f5f5);
          border-radius: 12px;
          padding: 1rem;
          margin-bottom: 1rem;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .confirmation-box.danger {
          border-left: 4px solid var(--tg-theme-destructive-text-color, #ff0000);
        }
        
        .confirmation-text {
          margin-bottom: 1rem;
          font-size: 0.9rem;
        }
        
        .confirmation-buttons {
          display: flex;
          gap: 0.5rem;
        }
        
        .confirm-btn, .cancel-btn {
          padding: 0.75rem 1rem;
          border-radius: 8px;
          font-size: 0.9rem;
          cursor: pointer;
          flex: 1;
          border: none;
          transition: all 0.2s ease;
        }
        
        .confirm-btn {
          background-color: var(--tg-theme-destructive-text-color, #ff0000);
          color: white;
        }
        
        .cancel-btn {
          background-color: var(--tg-theme-secondary-bg-color, #f5f5f5);
          border: 1px solid var(--tg-theme-hint-color, #999999);
          color: var(--tg-theme-text-color, #000000);
        }
        
        .message {
          padding: 1rem;
          border-radius: 8px;
          margin-bottom: 1rem;
          text-align: center;
        }
        
        .success {
          background-color: rgba(76, 175, 80, 0.1);
          color: #4caf50;
        }
        
        .error {
          background-color: rgba(244, 67, 54, 0.1);
          color: var(--tg-theme-destructive-text-color, #ff0000);
        }
        
        button:disabled {
          opacity: 0.6;
          cursor: not-allowed;
        }
      `}</style>
    </div>
  );
} 